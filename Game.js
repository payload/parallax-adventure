// Generated by CoffeeScript 1.3.1
(function() {
  var Game, GameInput,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  GameInput = (function() {

    GameInput.name = 'GameInput';

    function GameInput(_arg) {
      this.input_map = (_arg != null ? _arg : {}).input_map;
      this.continous = __bind(this.continous, this);

      this.deactivate = __bind(this.deactivate, this);

      this.trigger = __bind(this.trigger, this);

      if (this.input_map == null) {
        this.input_map = {};
      }
    }

    GameInput.prototype.trigger = function(x) {
      var map;
      if (!(map = this.input_map[x])) {
        return;
      }
      if (!map.active) {
        map.active = true;
        return typeof map.trigger === "function" ? map.trigger() : void 0;
      }
    };

    GameInput.prototype.deactivate = function(x) {
      var map;
      if (!(map = this.input_map[x])) {
        return;
      }
      if (map.active) {
        map.active = false;
        return typeof map.deactivate === "function" ? map.deactivate() : void 0;
      }
    };

    GameInput.prototype.continous = function(dt) {
      var k, map, _ref;
      _ref = this.input_map;
      for (k in _ref) {
        map = _ref[k];
        if (map.active) {
          if (typeof map.continous === "function") {
            map.continous(dt);
          }
        }
      }
      return;
    };

    return GameInput;

  })();

  Game = (function() {

    Game.name = 'Game';

    function Game(args) {
      this.update = __bind(this.update, this);
      this.$ = {};
      this.$.objs = new Objs(args);
      this.$.input = new GameInput(args);
      this.$.loop = new Loop(this.update);
    }

    Game.prototype.update = function(dt) {
      var id, obj, _ref, _results;
      this.$.input.continous(dt);
      _ref = this.$.objs.all;
      _results = [];
      for (id in _ref) {
        obj = _ref[id];
        _results.push(typeof obj.update === "function" ? obj.update(dt) : void 0);
      }
      return _results;
    };

    return Game;

  })();

  window.Game = Game;

}).call(this);
