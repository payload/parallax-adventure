// Generated by CoffeeScript 1.3.1
(function() {
  var Panorama,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Panorama = (function() {

    Panorama.name = 'Panorama';

    function Panorama(_arg) {
      this.layers = (_arg != null ? _arg : {}).layers;
      this.update = __bind(this.update, this);

      this.draw = __bind(this.draw, this);

      this.dec_current_layer = __bind(this.dec_current_layer, this);

      this.inc_current_layer = __bind(this.inc_current_layer, this);

      this.set_current_layer = __bind(this.set_current_layer, this);

      if (this.layers == null) {
        this.layers = new DoublyLinkedList({
          name: 'panorama'
        });
      }
      this.scroll = v(0, 0);
      this.vanishing_pt = v(0, 0);
      this.current_layer = 0;
    }

    Panorama.prototype.set_current_layer = function(x) {
      return this.current_layer = max(min(x, this.layers.length - 1), 0);
    };

    Panorama.prototype.inc_current_layer = function() {
      return this.set_current_layer(1 + this.current_layer);
    };

    Panorama.prototype.dec_current_layer = function() {
      return this.set_current_layer(-1 + this.current_layer);
    };

    Panorama.prototype.draw = function() {
      var ctx, hide, i, j, l, layer, layers, s, scroll, show, x, _i, _j, _k, _len, _len1, _ref;
      layers = this.layers.values();
      show = 10;
      hide = layers.slice(0, this.current_layer).concat(layers.slice(this.current_layer + show));
      for (_i = 0, _len = hide.length; _i < _len; _i++) {
        layer = hide[_i];
        if (!(!layer.hidden)) {
          continue;
        }
        (ctx = layer.ctx).clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        layer.hidden = true;
      }
      layers = layers.slice(this.current_layer, this.current_layer + show);
      l = layers.length;
      scroll = this.scroll;
      _ref = layers.reverse();
      for (j = _j = 0, _len1 = _ref.length; _j < _len1; j = ++_j) {
        layer = _ref[j];
        layer.hidden = false;
        i = l - j - 1;
        s = Math.pow(0.75, i);
        ctx = layer.ctx;
        ctx.save();
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.translate(this.vanishing_pt.x, this.vanishing_pt.y);
        ctx.scale(s, s);
        ctx.translate(-this.vanishing_pt.x - this.scroll.x, -this.vanishing_pt.y);
        layer.draw();
        ctx.save();
        ctx.beginPath();
        for (x = _k = -2; _k <= 2; x = ++_k) {
          x *= 600;
          ctx.moveTo(x, 0);
          ctx.lineTo(x, 200);
          ctx.moveTo(-x, 0);
          ctx.lineTo(-x, 200);
        }
        ctx.stroke();
        ctx.restore();
        ctx.restore();
      }
      return;
    };

    Panorama.prototype.update = function(dt) {
      this.layers.call(function(layer) {
        return layer.update(dt);
      });
      return;
    };

    return Panorama;

  })();

  window.Panorama = Panorama;

}).call(this);
