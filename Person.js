// Generated by CoffeeScript 1.3.1
(function() {
  var Person,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Person = (function() {

    Person.name = 'Person';

    function Person(_arg) {
      var layer, _ref;
      _ref = _arg != null ? _arg : {}, this.p = _ref.p, this.s = _ref.s, layer = _ref.layer;
      this.handle_coord = __bind(this.handle_coord, this);

      this.stop_move = __bind(this.stop_move, this);

      this.move = __bind(this.move, this);

      this.update = __bind(this.update, this);

      this.draw = __bind(this.draw, this);

      this.set_layer = __bind(this.set_layer, this);

      if (this.p == null) {
        this.p = v(0, 0);
      }
      if (this.s == null) {
        this.s = v(150, 0);
      }
      this.r = 15;
      this.movements = {};
      this.ground = null;
      this.set_layer(layer);
    }

    Person.prototype.set_layer = function(layer) {
      if (this.layer) {
        this.layer.$.objs.rem(this);
      }
      this.layer = layer;
      if (this.layer) {
        this.layer.$.objs.add(this);
        this.ground = this.layer.ground;
      }
      return this.layer;
    };

    Person.prototype.draw = function(ctx) {
      var r;
      r = this.r;
      ctx.save();
      ctx.beginPath();
      ctx.translate(0, -r);
      ctx.draw_circle(this.p.x, this.p.y, r);
      return ctx.restore();
    };

    Person.prototype.update = function(dt) {
      var t, x, y, _ref;
      if (this.movements.coord) {
        _ref = this.movements.coord, x = _ref.x, y = _ref.y;
        t = this.s.x * 0.1;
        this.movements.left = this.p.x - t > x;
        this.movements.right = this.p.x + t < x;
      }
      if (this.movements.left) {
        this.p.x -= this.s.x * dt;
      }
      if (this.movements.right) {
        this.p.x += this.s.x * dt;
      }
      this.p.x = max(min(this.p.x, this.ground.p.x + this.ground.size.x - this.r), this.ground.p.x + this.r);
      if (this.ground) {
        return this.p.y = this.ground.top(this.p.x);
      }
    };

    Person.prototype.move = function(where) {
      return this.movements[where] = true;
    };

    Person.prototype.stop_move = function(where) {
      return this.movements[where] = false;
    };

    Person.prototype.handle_coord = function(p) {
      return this.movements.coord = p;
    };

    return Person;

  })();

  window.Person = Person;

}).call(this);
