// Generated by CoffeeScript 1.3.1
(function() {
  var MyGame, fc,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  fc = {
    x: 0
  };

  MyGame = (function(_super) {

    __extends(MyGame, _super);

    MyGame.name = 'MyGame';

    function MyGame() {
      this.update = __bind(this.update, this);

      this.add_some_trees = __bind(this.add_some_trees, this);

      var ground, i, layer, p, panorama, person, size, _i,
        _this = this;
      MyGame.__super__.constructor.apply(this, arguments);
      panorama = new Panorama;
      OBJ_X(panorama.vanishing_pt, {
        x: 300,
        y: 100
      });
      this.panorama = panorama;
      for (i = _i = 0; _i < 6; i = ++_i) {
        size = v(600, 200);
        layer = new Layer({
          size: size
        });
        panorama.layers.add(layer);
        size = v(600 * (i + 2), 15);
        p = v(-size.x / 2, 180);
        ground = new Ground({
          p: p,
          size: size
        });
        layer.set_ground(ground);
        this.add_some_trees(layer);
        p = v(random0(600), 0);
        person = new Person({
          p: p,
          layer: layer
        });
        if (this.player == null) {
          this.player = person;
        }
      }
      OBJ_X(this.$.input.input_map, {
        65: {
          trigger: function() {
            return _this.player.move('left');
          },
          deactivate: function() {
            return _this.player.stop_move('left');
          }
        },
        68: {
          trigger: function() {
            return _this.player.move('right');
          },
          deactivate: function() {
            return _this.player.stop_move('right');
          }
        },
        187: {
          trigger: function() {
            return panorama.inc_current_layer();
          }
        },
        189: {
          trigger: function() {
            return panorama.dec_current_layer();
          }
        },
        87: {
          trigger: function() {
            var next, _ref;
            next = (_ref = _this.player.layer.$.panorama.next) != null ? _ref.value : void 0;
            if (next) {
              return _this.player.set_layer(next);
            }
          }
        },
        83: {
          trigger: function() {
            var prev, _ref;
            prev = (_ref = _this.player.layer.$.panorama.prev) != null ? _ref.value : void 0;
            if (prev) {
              return _this.player.set_layer(prev);
            }
          }
        }
      });
    }

    MyGame.prototype.add_some_trees = function(layer) {
      var i, some, tree, _i, _results;
      some = layer.size.x / 100;
      _results = [];
      for (i = _i = 0; 0 <= some ? _i < some : _i > some; i = 0 <= some ? ++_i : --_i) {
        tree = new Tree({
          layer: layer
        });
        _results.push(tree.set_p({
          x: random(layer.size.x, layer.ground.p.x)
        }));
      }
      return _results;
    };

    MyGame.prototype.update = function(dt) {
      var p, size, w, x, _ref;
      MyGame.__super__.update.apply(this, arguments);
      this.panorama.update(dt);
      w = 300;
      x = this.player.p.x;
      _ref = this.player.layer.ground, p = _ref.p, size = _ref.size;
      this.panorama.scroll.x = max(min(x - w, p.x + size.x - w * 2), p.x);
      this.panorama.draw();
      if (fc.x-- === 0) {
        console.timeEnd(get_id(fc));
        console.time(get_id(fc));
        return fc.x += 10;
      }
    };

    return MyGame;

  })(Game);

  delay(function() {
    var game;
    window.game = game = new MyGame;
    this.onkeydown = function(_arg) {
      var which;
      which = _arg.which;
      return game.$.input.trigger(which);
    };
    this.onkeyup = function(_arg) {
      var which;
      which = _arg.which;
      return game.$.input.deactivate(which);
    };
    return game.$.loop.start();
  });

}).call(this);
